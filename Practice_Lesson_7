#Задание 1
#Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks):
#zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110], ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
#Используя математические операции, посчитать коэффициенты линейной регрессии, приняв за X заработную плату (то есть, zp - признак),
#а за y - значения скорингового балла (то есть, ks - целевая переменная). Произвести расчет как с использованием intercept, так и без.

import numpy as np
zp=np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks=np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
n = len(zp)
b = (np.mean (zp * ks) - np.mean (zp) * np.mean (ks)) / (np.mean(zp**2)-np.mean(zp)**2)
a = np.mean(ks)-b*np.mean(zp)
print (b) #2.620538882402765
print (a) #444.1773573243596

zp = zp.reshape((10,1))
ks = ks.reshape((10,1))
B = np.dot(np.linalg.inv(np.dot(zp.T,zp)),zp.T@ks)
print (B) #5.88982042 без intercept

#Задание 2
#Посчитать коэффициент линейной регрессии при заработной плате (zp), используя градиентный спуск (без intercept).
import numpy as np
zp=np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks=np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

def mse_(B1,ks=ks,zp=zp,n=10):
    return np.sum((B1*zp-ks)**2)/n
    
alfa = 1e-06
B1 = 0.1
n = 10
for i in range(800):
    B1 -=alfa*(2/n)*np.sum((B1*zp-ks)*zp)
    if i%50==0:
        print ('Iteration:{i},B1={B1}, mse={mse}'.format(i=i,B1=B1,mse=mse_(B1)))
#B1 = 5.8898

#Задание 3
#Произвести вычисления как в пункте 2, но с вычислением intercept.
import numpy as np
zp=np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks=np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

def mse_(B1,a,ks=ks,zp=zp,n=10):
    return np.sum((a+B1*zp-ks)**2)/n
    
alfa = 1e-06
a = 0.1
B1 = 0.1
n = 10
for i in range(2000):
    B1 -=alfa*(2/n)*np.sum((a+B1*zp-ks)*zp)
    a = np.mean(ks)-B1*np.mean(zp)
    if i%100==0:
        print ('Iteration:{i},B1={B1}, a={a}, mse={mse}'.format(i=i,B1=B1,a=a,mse=mse_(B1,a)))
        
#Iteration:0,B1=0.2595078, a=683.58590908, mse=25951.172256170266
#Iteration:100,B1=1.4497046892899992, a=562.8999445059941, mse=11261.05090783013
#Iteration:200,B1=2.0399227617683273, a=503.05183195669156, mse=7648.510042742366
#Iteration:300,B1=2.332611623766481, a=473.37318135007877, mse=6760.1272178173995
#Iteration:400,B1=2.4777558915081634, a=458.6555526010722, mse=6541.659365661349
#Iteration:500,B1=2.549732864989315, a=451.3570874900834, mse=6487.934551215834
#Iteration:600,B1=2.585426211975134, a=447.7377821057214, mse=6474.722741520631
#Iteration:700,B1=2.603126525803744, a=445.9429702835003, mse=6471.473741645552
#Iteration:800,B1=2.611904103029992, a=445.05292395275876, mse=6470.674759490053
#Iteration:900,B1=2.61625689941026, a=444.6115503997996, mse=6470.478276723246
#Iteration:1000,B1=2.6184154490692033, a=444.39267346438277, mse=6470.429958400511
#Iteration:1100,B1=2.619485872820529, a=444.28413249599834, mse=6470.418076135467
#Iteration:1200,B1=2.6200166954507402, a=444.2303070812949, mse=6470.415154092345
#Iteration:1300,B1=2.6202799301411086, a=444.20361508369155, mse=6470.414435514196
#Iteration:1400,B1=2.6204104680991205, a=444.19037853474913, mse=6470.414258804088
#Iteration:1500,B1=2.620475201810538, a=444.18381453641143, mse=6470.414215348186
#Iteration:1600,B1=2.620507303227306, a=444.18055945275114, mse=6470.414204661669
#Iteration:1700,B1=2.6205232223046444, a=444.178945258309, mse=6470.414202033682
#Iteration:1800,B1=2.6205311165675407, a=444.17814478005135, mse=6470.414201387413
#Iteration:1900,B1=2.6205350313287648, a=444.1777478232632, mse=6470.414201228487
